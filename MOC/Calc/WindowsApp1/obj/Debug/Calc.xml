<?xml version="1.0"?>
<doc>
<assembly>
<name>
Calc
</name>
</assembly>
<members>
<member name="T:Calc.My.Resources.Resources">
<summary>
  Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
</summary>
</member>
<member name="P:Calc.My.Resources.Resources.ResourceManager">
<summary>
  Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
</summary>
</member>
<member name="P:Calc.My.Resources.Resources.Culture">
<summary>
  Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
  Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
</summary>
</member>
<member name="M:Calc.Calc_ITS.Calc_ITS_Load(System.Object,System.EventArgs)">
 <summary>
 Erzeugt das Fenster
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:Calc.Calc_ITS.LabelClose_Click(System.Object,System.EventArgs)">
 <summary>
 Schließt die App
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:Calc.Calc_ITS.LabelMinimize_Click(System.Object,System.EventArgs)">
 <summary>
 Minimmiert das Fenster
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:Calc.Calc_ITS.Button_Calculate_URI_Click(System.Object,System.EventArgs)">
 <summary>
 Wendet die URI Regln an
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:Calc.Calc_ITS.Button_URI_Delete_Click(System.Object,System.EventArgs)">
 <summary>
 Löscht alle Eingaben in den Feldern für URI
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:Calc.Calc_ITS.Button_Calculate_PUI_Click(System.Object,System.EventArgs)">
 <summary>
 Wendet die PUI Regln an
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:Calc.Calc_ITS.Button_PUI_Delete_Click(System.Object,System.EventArgs)">
 <summary>
 Löscht alle Eingaben in den Feldern für PUI
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:Calc.Calc_ITS.CountEmptyBoxesUri">
 <summary>
 Zählt die nicht gefüllten Boxen der PUI Felder
 </summary>
 <returns></returns>
</member>
<member name="M:Calc.Calc_ITS.CountEmptyBoxesPUI">
 <summary>
 Zählt die nicht gefüllten Boxen der PUI Felder
 </summary>
 <returns></returns>
</member>
<member name="M:Calc.Calc_Main.Form1_Load(System.Object,System.EventArgs)">
 <summary>
 Erzeugt das Fenster
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:Calc.Calc_Main.Button_Equals_Click(System.Object,System.EventArgs)">
 <summary>
 Wenn ein Term angegeben wird, wird dieser zur Berechnung weiter gegeben, ansonsten wird eine Fehlermeldung geworfen
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:Calc.Calc_Main.LabelClose_Click(System.Object,System.EventArgs)">
 <summary>
 Schließt die App
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:Calc.Calc_Main.LabelMinimize_Click(System.Object,System.EventArgs)">
 <summary>
 Minimmiert das Fenster
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:Calc.Calc_Main.Button_Delete_Click(System.Object,System.EventArgs)">
 <summary>
 Setzt alle Listen, sowie die Input und Output Box auf Nothing
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:Calc.Calc_Main.Button_ClearMemory_Click(System.Object,System.EventArgs)">
 <summary>
 Setzt den Zwischenspeicher zurück
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:Calc.Calc_Main.Button_PlaceResultInInput_Click(System.Object,System.EventArgs)">
 <summary>
 Schreibt das Ergebnis der letzten Berechnung in die InputBox
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:Calc.Calc_Main.Button_OpenITS_Click(System.Object,System.EventArgs)">
 <summary>
 Öffnet das Fenster für den ITS Bereich
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:Calc.Calc_Main.Main(System.String)">
 <summary>
 Die Hauptmethode, die das Berechnen des übergebenen Strings ausführt
 Das Ergebnis wird dann in der Output Box ausgegeben
 Die beiden Listen der Werte und der Operatoren werden auch zurück gesetzt
 </summary>
 <param name="input">Term, der berechnet werden soll</param>
</member>
<member name="M:Calc.Calc_Main.Calculate(System.String)">
 <summary>
 Im String wird nach Rechenoperatoren geschaut. 
 Wird einer gefunden, so wird er in die Liste für Operatoren eingetragen und sein Index in die Liste für die Indexe der Operatoren eingetragen
 Der erste Wert (vor dem ersten Operator) wird in die Liste für Werte eingetragen
 Alle Werte, die dann zwischen zwischen 2 Operatoren stehen, werden bestimmt und auch in die Liste für Werte eingetragen
 Der letzte Wert (nach dem letzten Operator) wird auch in die Liste für Werte eingetragen
 </summary>
 <param name="input">Eingabe als String</param>
</member>
<member name="M:Calc.Calc_Main.RefactoringLists(System.Int32)">
 <summary>
 Diese Funktion wird nach dem Addieren, Substrahieren, Multiplizieren und nach dem Dividieren aufgerufen, 
 um die Liste der Werte und der Operatoren zu kürzen
 </summary>
 <param name="operatorIndex">Index des Operators</param>
</member>
<member name="M:Calc.Calc_Main.getNumberofExponentOperators">
 <summary>
 Ermittelt die Anzahl der Exponent Operatoren (^) in der Eingabe für den Abbruch der For Schleife für die Exponent Operatoren
 </summary>
 <returns></returns>
</member>
<member name="M:Calc.Calc_Main.getNumberOfDotOperators">
 <summary>
 Ermittelt die Anzahl der Punkt Operatoren (* und /) in der Eingabe für den Abbruch der For Schleife für die Punkt Operatoren
 </summary>
 <returns></returns>
</member>
<member name="M:Calc.Calc_Main.getNumberOfDashOperators">
 <summary>
 Ermittelt die Anzahl der Strich (+ und -) Operatoren in der Eingabe für den Abbruch der For Schleife für die Strich Operatoren
 </summary>
 <returns></returns>
</member>
<member name="M:Calc.Calc_Main.innerBrackets(System.String)">
 <summary>
 Die Funktion ermittelt, ob es Klammern in Klammern gibt
 Bsp.: (5-(1+3*2)+5)*2
 </summary>
 <param name="input"></param>
 <returns></returns>
</member>
<member name="M:Calc.Calc_Main.getBracketIndex(System.String,System.Int32@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@)">
 <summary>
 Die Methode ermittelt die Indexe der öffnenden und schließenden Klammer und die Anzahl an Klammern im übergebenen String
 </summary>
 <param name="input">Input</param>
 <param name="numberofBrackets">Anzahl der Klammern</param>
 <param name="openBracketIndex">Liste mit den Indexen der geöffneten Klammern</param>
 <param name="closedBracketIndex">Liste mit den Indexen der geschlossenen Klammern</param>
</member>
<member name="M:Calc.Calc_Main.ReplaceBracketWithValue(System.String,System.Int32,System.Int32,System.Double)">
 <summary>
 Die Funktion ersetzt den durch die Indexe festgelegten Bereich im String durch den Wert und gibt das Ergebnis dann zurück
 </summary>
 <param name="input">Eingabe</param>
 <param name="startIndex">Geöffnete Klammer</param>
 <param name="endIndex">geschlossene Klammer</param>
 <param name="value">Wert</param>
 <returns></returns>
</member>
<member name="M:Calc.Calc_Main.DoubleOperators(System.String)">
 <summary>
 Ermittelt, ob in dem übergebenen String zwei Operator (+,-,*,/,^) direkt aneinander stehen
 Ist dies der Fall gibt die Methode ein True zurück, ansonsten ein False
 </summary>
 <param name="input"></param>
 <returns></returns>
</member>
</members>
</doc>
